// Copyright 2017, TCN Inc.
// All rights reserved.

// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:

//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of TCN Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto2";

package persist;

import "google/protobuf/descriptor.proto";

option go_package="persist";

extend google.protobuf.FileOptions {
    optional string package = 560003;
}

extend google.protobuf.MethodOptions {
    optional QLImpl ql = 560000;
}

extend google.protobuf.ServiceOptions {
    optional TypeMapping mapping = 560001;

    // persistence option, right now it has only one option, SQL
    // more options will be added when new query languages will be supported
    optional PersistenceOptions service_type = 560002;
}

enum PersistenceOptions {
    // SQL Query
    SQL = 0;
    SPANNER = 1;
}


message QLImpl {
    // the query string with numeric placeholders for parameters
    // its an array to allow the query to span across multiple lines but it
    // will be joined and used as a single sql query string at generation time
    repeated string query = 1;

    // in order list of argument names that will be used as parameters for the query
    // the list of arguments represents the field names of the input type message
    repeated string arguments = 2;

    // method level type mapping, if this does not exist it will be
    // used the type mapping at the service level, if that one will not exist
    // it will be used the default one, the code can be found
    // generator/service.go function GetSafeType()
    optional TypeMapping mapping = 4;

    // Callback definition function
    // define the name and the package of a function with the signature
    // func CallbackFunction(message pb.Message) (pb.Message, error)
    message CallbackFunction {
        // function name
        required string name = 1;
        // function go package name in the following formats
        // github.com/repo;package
        // github.com/package
        // dir/package
        // package
        required string package = 2;
    }
    // the before function will be called before running any sql code for
    // every input data element and if the return will be not empty/nil and
    // the error will be nil the data returned by this function will be
    // returned by the function skipping the code execution
    optional CallbackFunction before = 10;
    // the after function will be called after running any sql code for
    // every output data element, the return data of this function will be ignored
    optional CallbackFunction after = 11;
}

message TypeMapping {
    message TypeDescriptor {
        // if this is not setup the proto_type must be one of the built-in types
        optional string proto_type_name =1;
        // If proto_type_name is set, this need not be set.  If both this and proto_type_name
        // are set, this must be one of TYPE_ENUM, TYPE_MESSAGE
        // TYPE_GROUP is not supported
        optional google.protobuf.FieldDescriptorProto.Type proto_type= 2;
        // if proto_label is not setup we consider any option except LABAEL_REPEATED
        optional google.protobuf.FieldDescriptorProto.Label proto_label = 3;
        // go type name that will be used in the method implementation
        required string go_type = 4;
        // go package path
        required string go_package = 5;
    }
    repeated TypeDescriptor types = 1;
}
