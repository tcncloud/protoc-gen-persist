// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tests/sql/little_of_everything/little_of_everything.proto

package little_of_everything

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/protoc-gen-go/descriptor"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/tcncloud/protoc-gen-persist/persist"
	test "github.com/tcncloud/protoc-gen-persisttests/test"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MyEnum int32

const (
	MyEnum_OPTION_0 MyEnum = 0
	MyEnum_OPTION_1 MyEnum = 1
)

var MyEnum_name = map[int32]string{
	0: "OPTION_0",
	1: "OPTION_1",
}

var MyEnum_value = map[string]int32{
	"OPTION_0": 0,
	"OPTION_1": 1,
}

func (x MyEnum) String() string {
	return proto.EnumName(MyEnum_name, int32(x))
}

func (MyEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bd2fb173797ce17c, []int{0}
}

type MappedEnum int32

const (
	MappedEnum_OPT_0 MappedEnum = 0
	MappedEnum_OPT_1 MappedEnum = 1
)

var MappedEnum_name = map[int32]string{
	0: "OPT_0",
	1: "OPT_1",
}

var MappedEnum_value = map[string]int32{
	"OPT_0": 0,
	"OPT_1": 1,
}

func (x MappedEnum) String() string {
	return proto.EnumName(MappedEnum_name, int32(x))
}

func (MappedEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bd2fb173797ce17c, []int{1}
}

type ExampleTable1_InnerEnum int32

const (
	ExampleTable1_OP_0 ExampleTable1_InnerEnum = 0
	ExampleTable1_OP_1 ExampleTable1_InnerEnum = 1
)

var ExampleTable1_InnerEnum_name = map[int32]string{
	0: "OP_0",
	1: "OP_1",
}

var ExampleTable1_InnerEnum_value = map[string]int32{
	"OP_0": 0,
	"OP_1": 1,
}

func (x ExampleTable1_InnerEnum) String() string {
	return proto.EnumName(ExampleTable1_InnerEnum_name, int32(x))
}

func (ExampleTable1_InnerEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bd2fb173797ce17c, []int{1, 0}
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd2fb173797ce17c, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type ExampleTable1 struct {
	TableId      int32                       `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Key          string                      `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value        string                      `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	InnerMessage *ExampleTable1_InnerMessage `protobuf:"bytes,4,opt,name=inner_message,json=innerMessage,proto3" json:"inner_message,omitempty"`
	InnerEnum    ExampleTable1_InnerEnum     `protobuf:"varint,5,opt,name=inner_enum,json=innerEnum,proto3,enum=tests.ExampleTable1_InnerEnum" json:"inner_enum,omitempty"`
	StringArray  []string                    `protobuf:"bytes,6,rep,name=string_array,json=stringArray,proto3" json:"string_array,omitempty"`
	BytesField   []byte                      `protobuf:"bytes,7,opt,name=bytes_field,json=bytesField,proto3" json:"bytes_field,omitempty"`
	StartTime    *timestamp.Timestamp        `protobuf:"bytes,10,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	TestField    *test.Test                  `protobuf:"bytes,100,opt,name=test_field,json=testField,proto3" json:"test_field,omitempty"`
	// Types that are valid to be assigned to SkipOneOf:
	//	*ExampleTable1_TestId
	//	*ExampleTable1_TestValue
	//	*ExampleTable1_TestOutMessage
	SkipOneOf            isExampleTable1_SkipOneOf `protobuf_oneof:"skip_one_of"`
	Myyenum              MyEnum                    `protobuf:"varint,101,opt,name=myyenum,proto3,enum=tests.MyEnum" json:"myyenum,omitempty"`
	Testsenum            test.TestEnum             `protobuf:"varint,102,opt,name=testsenum,proto3,enum=tests.test.TestEnum" json:"testsenum,omitempty"`
	Mappedenum           MappedEnum                `protobuf:"varint,103,opt,name=mappedenum,proto3,enum=tests.MappedEnum" json:"mappedenum,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ExampleTable1) Reset()         { *m = ExampleTable1{} }
func (m *ExampleTable1) String() string { return proto.CompactTextString(m) }
func (*ExampleTable1) ProtoMessage()    {}
func (*ExampleTable1) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd2fb173797ce17c, []int{1}
}

func (m *ExampleTable1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExampleTable1.Unmarshal(m, b)
}
func (m *ExampleTable1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExampleTable1.Marshal(b, m, deterministic)
}
func (m *ExampleTable1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExampleTable1.Merge(m, src)
}
func (m *ExampleTable1) XXX_Size() int {
	return xxx_messageInfo_ExampleTable1.Size(m)
}
func (m *ExampleTable1) XXX_DiscardUnknown() {
	xxx_messageInfo_ExampleTable1.DiscardUnknown(m)
}

var xxx_messageInfo_ExampleTable1 proto.InternalMessageInfo

func (m *ExampleTable1) GetTableId() int32 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *ExampleTable1) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ExampleTable1) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *ExampleTable1) GetInnerMessage() *ExampleTable1_InnerMessage {
	if m != nil {
		return m.InnerMessage
	}
	return nil
}

func (m *ExampleTable1) GetInnerEnum() ExampleTable1_InnerEnum {
	if m != nil {
		return m.InnerEnum
	}
	return ExampleTable1_OP_0
}

func (m *ExampleTable1) GetStringArray() []string {
	if m != nil {
		return m.StringArray
	}
	return nil
}

func (m *ExampleTable1) GetBytesField() []byte {
	if m != nil {
		return m.BytesField
	}
	return nil
}

func (m *ExampleTable1) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *ExampleTable1) GetTestField() *test.Test {
	if m != nil {
		return m.TestField
	}
	return nil
}

type isExampleTable1_SkipOneOf interface {
	isExampleTable1_SkipOneOf()
}

type ExampleTable1_TestId struct {
	TestId int32 `protobuf:"varint,1001,opt,name=test_id,json=testId,proto3,oneof"`
}

type ExampleTable1_TestValue struct {
	TestValue string `protobuf:"bytes,1002,opt,name=test_value,json=testValue,proto3,oneof"`
}

type ExampleTable1_TestOutMessage struct {
	TestOutMessage *test.Test `protobuf:"bytes,1003,opt,name=test_out_message,json=testOutMessage,proto3,oneof"`
}

func (*ExampleTable1_TestId) isExampleTable1_SkipOneOf() {}

func (*ExampleTable1_TestValue) isExampleTable1_SkipOneOf() {}

func (*ExampleTable1_TestOutMessage) isExampleTable1_SkipOneOf() {}

func (m *ExampleTable1) GetSkipOneOf() isExampleTable1_SkipOneOf {
	if m != nil {
		return m.SkipOneOf
	}
	return nil
}

func (m *ExampleTable1) GetTestId() int32 {
	if x, ok := m.GetSkipOneOf().(*ExampleTable1_TestId); ok {
		return x.TestId
	}
	return 0
}

func (m *ExampleTable1) GetTestValue() string {
	if x, ok := m.GetSkipOneOf().(*ExampleTable1_TestValue); ok {
		return x.TestValue
	}
	return ""
}

func (m *ExampleTable1) GetTestOutMessage() *test.Test {
	if x, ok := m.GetSkipOneOf().(*ExampleTable1_TestOutMessage); ok {
		return x.TestOutMessage
	}
	return nil
}

func (m *ExampleTable1) GetMyyenum() MyEnum {
	if m != nil {
		return m.Myyenum
	}
	return MyEnum_OPTION_0
}

func (m *ExampleTable1) GetTestsenum() test.TestEnum {
	if m != nil {
		return m.Testsenum
	}
	return test.TestEnum_first
}

func (m *ExampleTable1) GetMappedenum() MappedEnum {
	if m != nil {
		return m.Mappedenum
	}
	return MappedEnum_OPT_0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ExampleTable1) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ExampleTable1_TestId)(nil),
		(*ExampleTable1_TestValue)(nil),
		(*ExampleTable1_TestOutMessage)(nil),
	}
}

type ExampleTable1_InnerMessage struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExampleTable1_InnerMessage) Reset()         { *m = ExampleTable1_InnerMessage{} }
func (m *ExampleTable1_InnerMessage) String() string { return proto.CompactTextString(m) }
func (*ExampleTable1_InnerMessage) ProtoMessage()    {}
func (*ExampleTable1_InnerMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd2fb173797ce17c, []int{1, 0}
}

func (m *ExampleTable1_InnerMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExampleTable1_InnerMessage.Unmarshal(m, b)
}
func (m *ExampleTable1_InnerMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExampleTable1_InnerMessage.Marshal(b, m, deterministic)
}
func (m *ExampleTable1_InnerMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExampleTable1_InnerMessage.Merge(m, src)
}
func (m *ExampleTable1_InnerMessage) XXX_Size() int {
	return xxx_messageInfo_ExampleTable1_InnerMessage.Size(m)
}
func (m *ExampleTable1_InnerMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ExampleTable1_InnerMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ExampleTable1_InnerMessage proto.InternalMessageInfo

func (m *ExampleTable1_InnerMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ExternalTypeTestMessage struct {
	Time                 *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ExternalTypeTestMessage) Reset()         { *m = ExternalTypeTestMessage{} }
func (m *ExternalTypeTestMessage) String() string { return proto.CompactTextString(m) }
func (*ExternalTypeTestMessage) ProtoMessage()    {}
func (*ExternalTypeTestMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd2fb173797ce17c, []int{2}
}

func (m *ExternalTypeTestMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExternalTypeTestMessage.Unmarshal(m, b)
}
func (m *ExternalTypeTestMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExternalTypeTestMessage.Marshal(b, m, deterministic)
}
func (m *ExternalTypeTestMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalTypeTestMessage.Merge(m, src)
}
func (m *ExternalTypeTestMessage) XXX_Size() int {
	return xxx_messageInfo_ExternalTypeTestMessage.Size(m)
}
func (m *ExternalTypeTestMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalTypeTestMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalTypeTestMessage proto.InternalMessageInfo

func (m *ExternalTypeTestMessage) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type CountRows struct {
	Count                int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountRows) Reset()         { *m = CountRows{} }
func (m *CountRows) String() string { return proto.CompactTextString(m) }
func (*CountRows) ProtoMessage()    {}
func (*CountRows) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd2fb173797ce17c, []int{3}
}

func (m *CountRows) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountRows.Unmarshal(m, b)
}
func (m *CountRows) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountRows.Marshal(b, m, deterministic)
}
func (m *CountRows) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountRows.Merge(m, src)
}
func (m *CountRows) XXX_Size() int {
	return xxx_messageInfo_CountRows.Size(m)
}
func (m *CountRows) XXX_DiscardUnknown() {
	xxx_messageInfo_CountRows.DiscardUnknown(m)
}

var xxx_messageInfo_CountRows proto.InternalMessageInfo

func (m *CountRows) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterEnum("tests.MyEnum", MyEnum_name, MyEnum_value)
	proto.RegisterEnum("tests.MappedEnum", MappedEnum_name, MappedEnum_value)
	proto.RegisterEnum("tests.ExampleTable1_InnerEnum", ExampleTable1_InnerEnum_name, ExampleTable1_InnerEnum_value)
	proto.RegisterType((*Empty)(nil), "tests.Empty")
	proto.RegisterType((*ExampleTable1)(nil), "tests.ExampleTable1")
	proto.RegisterType((*ExampleTable1_InnerMessage)(nil), "tests.ExampleTable1.InnerMessage")
	proto.RegisterType((*ExternalTypeTestMessage)(nil), "tests.ExternalTypeTestMessage")
	proto.RegisterType((*CountRows)(nil), "tests.CountRows")
}

func init() {
	proto.RegisterFile("tests/sql/little_of_everything/little_of_everything.proto", fileDescriptor_bd2fb173797ce17c)
}

var fileDescriptor_bd2fb173797ce17c = []byte{
	// 997 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xcf, 0x6b, 0xe3, 0x46,
	0x14, 0x8e, 0x9c, 0x75, 0x1c, 0xbd, 0x38, 0x41, 0x3b, 0x4d, 0xb6, 0xaa, 0x0b, 0xc9, 0x44, 0x2c,
	0xc4, 0x84, 0xac, 0xbd, 0xf6, 0x1e, 0xca, 0x52, 0x02, 0xdd, 0x0d, 0x0e, 0x09, 0x34, 0x71, 0x90,
	0xdd, 0x16, 0xf6, 0x22, 0x14, 0x69, 0xa2, 0x1d, 0xa2, 0x5f, 0xd5, 0x8c, 0xd2, 0xd5, 0xb5, 0xc7,
	0x9e, 0x1a, 0xe8, 0xa9, 0xa7, 0x52, 0xe8, 0xa9, 0xe7, 0x52, 0x43, 0xff, 0x97, 0x1e, 0x0b, 0x6d,
	0xff, 0x89, 0x32, 0x23, 0xc9, 0xf9, 0x25, 0x6f, 0x49, 0x69, 0xe9, 0x45, 0xcc, 0x7b, 0xf3, 0xde,
	0xf7, 0xbe, 0xf9, 0xde, 0xcc, 0x43, 0xf0, 0x9c, 0x13, 0xc6, 0x59, 0x97, 0x7d, 0xee, 0x77, 0x7d,
	0xca, 0xb9, 0x4f, 0xac, 0xe8, 0xcc, 0x22, 0x17, 0x24, 0xc9, 0xf8, 0x6b, 0x1a, 0x7a, 0x95, 0xce,
	0x4e, 0x9c, 0x44, 0x3c, 0x42, 0x75, 0x99, 0xda, 0x5a, 0x8b, 0x49, 0xc2, 0x28, 0xe3, 0xdd, 0x28,
	0xe6, 0x34, 0x0a, 0x59, 0xbe, 0xdb, 0xda, 0xf0, 0xa2, 0xc8, 0xf3, 0x49, 0x57, 0x5a, 0xa7, 0xe9,
	0x59, 0x97, 0xd3, 0x80, 0x30, 0x6e, 0x07, 0x71, 0x11, 0x80, 0x6f, 0x07, 0xb8, 0x84, 0x39, 0x09,
	0x8d, 0x79, 0x94, 0x14, 0x11, 0x6b, 0x39, 0x37, 0xf1, 0x95, 0x9f, 0xdc, 0x6d, 0x34, 0xa0, 0x3e,
	0x08, 0x62, 0x9e, 0x19, 0xbf, 0xd5, 0x61, 0x79, 0xf0, 0xc6, 0x0e, 0x62, 0x9f, 0x8c, 0xed, 0x53,
	0x9f, 0xf4, 0xd0, 0x7b, 0xb0, 0xc8, 0xc5, 0xca, 0xa2, 0xae, 0xae, 0x60, 0xa5, 0x5d, 0x37, 0x1b,
	0xd2, 0x3e, 0x74, 0x91, 0x06, 0xf3, 0xe7, 0x24, 0xd3, 0x6b, 0x58, 0x69, 0xab, 0xa6, 0x58, 0xa2,
	0x55, 0xa8, 0x5f, 0xd8, 0x7e, 0x4a, 0xf4, 0x79, 0xe9, 0xcb, 0x0d, 0xb4, 0x0f, 0xcb, 0x34, 0x0c,
	0x49, 0x62, 0x05, 0x84, 0x31, 0xdb, 0x23, 0xfa, 0x03, 0xac, 0xb4, 0x97, 0xfa, 0x9b, 0x1d, 0x49,
	0xa6, 0x73, 0xa3, 0x5e, 0xe7, 0x50, 0x44, 0x1e, 0xe5, 0x81, 0x66, 0x93, 0x5e, 0xb3, 0xd0, 0x2e,
	0x40, 0x8e, 0x43, 0xc2, 0x34, 0xd0, 0xeb, 0x58, 0x69, 0xaf, 0xf4, 0xd7, 0x67, 0x83, 0x0c, 0xc2,
	0x34, 0x30, 0x55, 0x5a, 0x2e, 0xd1, 0x26, 0x34, 0x19, 0x4f, 0x68, 0xe8, 0x59, 0x76, 0x92, 0xd8,
	0x99, 0xbe, 0x80, 0xe7, 0xdb, 0xaa, 0xb9, 0x94, 0xfb, 0x5e, 0x08, 0x17, 0xda, 0x80, 0xa5, 0xd3,
	0x8c, 0x13, 0x66, 0x9d, 0x51, 0xe2, 0xbb, 0x7a, 0x03, 0x2b, 0xed, 0xa6, 0x09, 0xd2, 0xb5, 0x2f,
	0x3c, 0xe8, 0x39, 0x00, 0xe3, 0x76, 0xc2, 0x2d, 0x21, 0xbd, 0x0e, 0xf2, 0x1c, 0xad, 0x4e, 0x2e,
	0x7b, 0xa7, 0x94, 0xbd, 0x33, 0x2e, 0xfb, 0x62, 0xaa, 0x32, 0x5a, 0xd8, 0xa8, 0x0b, 0x20, 0xa8,
	0x16, 0xd0, 0xae, 0x4c, 0xd5, 0x0a, 0xf6, 0xb2, 0x15, 0x63, 0xc2, 0xb8, 0xa9, 0x8a, 0x65, 0x5e,
	0xab, 0x05, 0x0d, 0x99, 0x40, 0x5d, 0xfd, 0x77, 0xc1, 0xa4, 0x7e, 0x30, 0x67, 0x2e, 0x08, 0xcf,
	0xa1, 0x8b, 0x70, 0x01, 0x96, 0xab, 0xfd, 0x87, 0xd8, 0x56, 0x0f, 0xe6, 0xf2, 0xec, 0x4f, 0xa5,
	0xe8, 0xbb, 0xa0, 0xc9, 0x88, 0x28, 0xe5, 0x53, 0xdd, 0xff, 0x6c, 0x54, 0x57, 0x3d, 0x98, 0x33,
	0x57, 0x84, 0x31, 0x4c, 0x79, 0xa9, 0xf5, 0x16, 0x34, 0x82, 0x2c, 0x93, 0x42, 0x13, 0x29, 0xf4,
	0x72, 0x91, 0x74, 0x94, 0x49, 0x5d, 0xcb, 0x5d, 0xd4, 0x07, 0x59, 0x94, 0xc9, 0xd0, 0x33, 0x19,
	0xba, 0x7a, 0x1b, 0x3f, 0xef, 0xc4, 0x34, 0x0c, 0xf5, 0x00, 0x02, 0x3b, 0x8e, 0x89, 0x2b, 0x93,
	0x3c, 0x99, 0xf4, 0xb0, 0xc4, 0x97, 0x1b, 0x32, 0xe3, 0x5a, 0x50, 0x6b, 0x1d, 0x9a, 0xd7, 0x6f,
	0x06, 0x5a, 0x81, 0xda, 0xf4, 0x42, 0xd6, 0xa8, 0x6b, 0x6c, 0x80, 0x3a, 0x6d, 0x3a, 0x5a, 0x84,
	0x07, 0xc3, 0x13, 0xeb, 0xa9, 0x36, 0x57, 0xac, 0x7a, 0x9a, 0xf2, 0x72, 0x19, 0x96, 0xd8, 0x39,
	0x8d, 0xad, 0x28, 0x14, 0x4f, 0xcf, 0x38, 0x84, 0x77, 0x07, 0x6f, 0x38, 0x49, 0x42, 0xdb, 0x1f,
	0x67, 0x31, 0x11, 0x2c, 0x4b, 0xe8, 0x0e, 0x3c, 0x90, 0xdd, 0x55, 0xfe, 0xb6, 0xbb, 0x32, 0xce,
	0xd8, 0x04, 0x75, 0x2f, 0x4a, 0x43, 0x6e, 0x46, 0x5f, 0x30, 0xf1, 0x02, 0x1c, 0x61, 0xc8, 0xec,
	0x79, 0x33, 0x37, 0xb6, 0x1f, 0xc3, 0x42, 0xae, 0x1b, 0x6a, 0xc2, 0xe2, 0xf0, 0x64, 0x7c, 0x38,
	0x3c, 0x96, 0xf4, 0xae, 0xac, 0x9e, 0xa6, 0x6c, 0x1b, 0x00, 0x57, 0xa7, 0x47, 0x2a, 0xd4, 0x87,
	0x27, 0x63, 0x19, 0x56, 0x2c, 0x7b, 0x9a, 0xd2, 0xff, 0x4e, 0x85, 0xe6, 0x58, 0x0a, 0x99, 0x5c,
	0x50, 0x87, 0xf4, 0x90, 0x09, 0xcb, 0x9f, 0x84, 0x76, 0x92, 0x15, 0x0f, 0xa0, 0x87, 0x56, 0xab,
	0x5e, 0x44, 0xab, 0xd2, 0x6b, 0xac, 0x7d, 0x3f, 0xb9, 0xac, 0x69, 0xb0, 0x92, 0x0a, 0x04, 0x8b,
	0x94, 0x10, 0xc7, 0x37, 0x31, 0xfb, 0xe8, 0xce, 0x8d, 0xb9, 0x0f, 0x5e, 0x1f, 0x59, 0x80, 0x46,
	0x24, 0xb9, 0x20, 0xc9, 0x88, 0x27, 0xc4, 0x0e, 0x46, 0xc4, 0x27, 0x0e, 0xbf, 0x17, 0xd1, 0xf7,
	0x05, 0xf0, 0x23, 0x58, 0x65, 0x12, 0xc6, 0x62, 0x12, 0xc7, 0x62, 0x12, 0xe8, 0xa9, 0x82, 0x1c,
	0x78, 0xb4, 0xe7, 0x53, 0x12, 0xf2, 0xbc, 0x00, 0x0d, 0xbd, 0x22, 0x7d, 0x46, 0x91, 0xf2, 0x3c,
	0xd3, 0xbe, 0x19, 0x1b, 0xa2, 0x40, 0x0b, 0x74, 0x47, 0xc2, 0x14, 0x05, 0xc4, 0xac, 0x28, 0x0e,
	0xd1, 0x56, 0x5a, 0x3f, 0x2c, 0x7c, 0x39, 0xb9, 0xac, 0xfd, 0x5a, 0x87, 0x9f, 0x14, 0xe0, 0xa3,
	0xc1, 0xc7, 0x83, 0xbd, 0x31, 0xa6, 0x2e, 0x7e, 0x31, 0xc2, 0x5b, 0xf9, 0x84, 0x3c, 0x27, 0xd9,
	0xd6, 0x0e, 0xa6, 0xee, 0x0e, 0x96, 0xcf, 0x72, 0x07, 0x07, 0xcc, 0xc3, 0x36, 0xc3, 0x37, 0x86,
	0xdf, 0x0e, 0x66, 0xdc, 0xe6, 0x29, 0xbb, 0xda, 0x10, 0xf7, 0x1b, 0xef, 0x9b, 0xc3, 0x23, 0x2c,
	0x1f, 0xac, 0xc4, 0xc2, 0x9f, 0x1d, 0x0c, 0xcc, 0x81, 0x80, 0xdf, 0xc5, 0x1f, 0x95, 0xf3, 0x17,
	0x29, 0x8f, 0x5b, 0xb7, 0x5a, 0x65, 0x54, 0x9e, 0x6f, 0xbb, 0xd2, 0x0b, 0x3f, 0x2a, 0x10, 0x56,
	0xf1, 0xa6, 0xee, 0xd6, 0x0e, 0x3e, 0x27, 0xd9, 0xbf, 0xcd, 0xbb, 0x8a, 0x71, 0xdf, 0xb8, 0x73,
	0x97, 0x66, 0xb0, 0xfd, 0x65, 0x86, 0xca, 0xff, 0x15, 0xdb, 0xeb, 0x2a, 0x57, 0xde, 0xb3, 0x7b,
	0x69, 0xfd, 0xf3, 0xff, 0xc8, 0x7e, 0xe6, 0x25, 0x9e, 0x71, 0x82, 0x66, 0xe9, 0x15, 0xbf, 0x00,
	0x5f, 0x4d, 0x2e, 0x6b, 0x1f, 0xc0, 0x3a, 0xbc, 0x65, 0xee, 0x69, 0x4b, 0xb0, 0x06, 0x77, 0xe7,
	0xb5, 0xb6, 0xf2, 0xf5, 0xe4, 0xb2, 0x36, 0xd7, 0x7f, 0x07, 0x1e, 0x1e, 0x47, 0x7c, 0x10, 0x0a,
	0x70, 0x77, 0x94, 0xcf, 0xa9, 0x97, 0xdf, 0x28, 0xdf, 0x4e, 0x2e, 0x6b, 0xcf, 0xde, 0xfe, 0x6b,
	0xf4, 0x61, 0x95, 0xf3, 0xd5, 0x2b, 0x8f, 0xf2, 0xd7, 0xe9, 0x69, 0xc7, 0x89, 0x82, 0x2e, 0x77,
	0x42, 0xc7, 0x8f, 0x52, 0x37, 0xff, 0xc5, 0x71, 0x9e, 0x78, 0x24, 0x7c, 0x52, 0xfe, 0x2c, 0xfd,
	0x03, 0xec, 0xd3, 0x05, 0x89, 0xf3, 0xec, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8a, 0xfe, 0xd6,
	0x4f, 0xb4, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Testservice1Client is the client API for Testservice1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Testservice1Client interface {
	UnaryExample1(ctx context.Context, in *ExampleTable1, opts ...grpc.CallOption) (*ExampleTable1, error)
	UnaryExample2(ctx context.Context, in *test.Test, opts ...grpc.CallOption) (*ExampleTable1, error)
	ServerStreamSelect(ctx context.Context, in *ExampleTable1, opts ...grpc.CallOption) (Testservice1_ServerStreamSelectClient, error)
	ClientStreamingExample(ctx context.Context, opts ...grpc.CallOption) (Testservice1_ClientStreamingExampleClient, error)
}

type testservice1Client struct {
	cc *grpc.ClientConn
}

func NewTestservice1Client(cc *grpc.ClientConn) Testservice1Client {
	return &testservice1Client{cc}
}

func (c *testservice1Client) UnaryExample1(ctx context.Context, in *ExampleTable1, opts ...grpc.CallOption) (*ExampleTable1, error) {
	out := new(ExampleTable1)
	err := c.cc.Invoke(ctx, "/tests.Testservice1/UnaryExample1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testservice1Client) UnaryExample2(ctx context.Context, in *test.Test, opts ...grpc.CallOption) (*ExampleTable1, error) {
	out := new(ExampleTable1)
	err := c.cc.Invoke(ctx, "/tests.Testservice1/UnaryExample2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testservice1Client) ServerStreamSelect(ctx context.Context, in *ExampleTable1, opts ...grpc.CallOption) (Testservice1_ServerStreamSelectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Testservice1_serviceDesc.Streams[0], "/tests.Testservice1/ServerStreamSelect", opts...)
	if err != nil {
		return nil, err
	}
	x := &testservice1ServerStreamSelectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Testservice1_ServerStreamSelectClient interface {
	Recv() (*ExampleTable1, error)
	grpc.ClientStream
}

type testservice1ServerStreamSelectClient struct {
	grpc.ClientStream
}

func (x *testservice1ServerStreamSelectClient) Recv() (*ExampleTable1, error) {
	m := new(ExampleTable1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testservice1Client) ClientStreamingExample(ctx context.Context, opts ...grpc.CallOption) (Testservice1_ClientStreamingExampleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Testservice1_serviceDesc.Streams[1], "/tests.Testservice1/ClientStreamingExample", opts...)
	if err != nil {
		return nil, err
	}
	x := &testservice1ClientStreamingExampleClient{stream}
	return x, nil
}

type Testservice1_ClientStreamingExampleClient interface {
	Send(*ExampleTable1) error
	CloseAndRecv() (*CountRows, error)
	grpc.ClientStream
}

type testservice1ClientStreamingExampleClient struct {
	grpc.ClientStream
}

func (x *testservice1ClientStreamingExampleClient) Send(m *ExampleTable1) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testservice1ClientStreamingExampleClient) CloseAndRecv() (*CountRows, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CountRows)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Testservice1Server is the server API for Testservice1 service.
type Testservice1Server interface {
	UnaryExample1(context.Context, *ExampleTable1) (*ExampleTable1, error)
	UnaryExample2(context.Context, *test.Test) (*ExampleTable1, error)
	ServerStreamSelect(*ExampleTable1, Testservice1_ServerStreamSelectServer) error
	ClientStreamingExample(Testservice1_ClientStreamingExampleServer) error
}

func RegisterTestservice1Server(s *grpc.Server, srv Testservice1Server) {
	s.RegisterService(&_Testservice1_serviceDesc, srv)
}

func _Testservice1_UnaryExample1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExampleTable1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Testservice1Server).UnaryExample1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tests.Testservice1/UnaryExample1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Testservice1Server).UnaryExample1(ctx, req.(*ExampleTable1))
	}
	return interceptor(ctx, in, info, handler)
}

func _Testservice1_UnaryExample2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(test.Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Testservice1Server).UnaryExample2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tests.Testservice1/UnaryExample2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Testservice1Server).UnaryExample2(ctx, req.(*test.Test))
	}
	return interceptor(ctx, in, info, handler)
}

func _Testservice1_ServerStreamSelect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExampleTable1)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(Testservice1Server).ServerStreamSelect(m, &testservice1ServerStreamSelectServer{stream})
}

type Testservice1_ServerStreamSelectServer interface {
	Send(*ExampleTable1) error
	grpc.ServerStream
}

type testservice1ServerStreamSelectServer struct {
	grpc.ServerStream
}

func (x *testservice1ServerStreamSelectServer) Send(m *ExampleTable1) error {
	return x.ServerStream.SendMsg(m)
}

func _Testservice1_ClientStreamingExample_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(Testservice1Server).ClientStreamingExample(&testservice1ClientStreamingExampleServer{stream})
}

type Testservice1_ClientStreamingExampleServer interface {
	SendAndClose(*CountRows) error
	Recv() (*ExampleTable1, error)
	grpc.ServerStream
}

type testservice1ClientStreamingExampleServer struct {
	grpc.ServerStream
}

func (x *testservice1ClientStreamingExampleServer) SendAndClose(m *CountRows) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testservice1ClientStreamingExampleServer) Recv() (*ExampleTable1, error) {
	m := new(ExampleTable1)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Testservice1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tests.Testservice1",
	HandlerType: (*Testservice1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryExample1",
			Handler:    _Testservice1_UnaryExample1_Handler,
		},
		{
			MethodName: "UnaryExample2",
			Handler:    _Testservice1_UnaryExample2_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamSelect",
			Handler:       _Testservice1_ServerStreamSelect_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamingExample",
			Handler:       _Testservice1_ClientStreamingExample_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "tests/sql/little_of_everything/little_of_everything.proto",
}

// NotEnabledServiceClient is the client API for NotEnabledService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotEnabledServiceClient interface {
}

type notEnabledServiceClient struct {
	cc *grpc.ClientConn
}

func NewNotEnabledServiceClient(cc *grpc.ClientConn) NotEnabledServiceClient {
	return &notEnabledServiceClient{cc}
}

// NotEnabledServiceServer is the server API for NotEnabledService service.
type NotEnabledServiceServer interface {
}

func RegisterNotEnabledServiceServer(s *grpc.Server, srv NotEnabledServiceServer) {
	s.RegisterService(&_NotEnabledService_serviceDesc, srv)
}

var _NotEnabledService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tests.NotEnabledService",
	HandlerType: (*NotEnabledServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "tests/sql/little_of_everything/little_of_everything.proto",
}
